{
  "conventionalCommits": {
    "types": [
      {
        "type": "feat",
        "description": "A new feature",
        "category": "Features"
      },
      {
        "type": "fix",
        "description": "A bug fix",
        "category": "Bug Fixes"
      },
      {
        "type": "docs",
        "description": "Documentation only changes",
        "category": "Documentation"
      },
      {
        "type": "style",
        "description": "Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)",
        "category": "Style"
      },
      {
        "type": "refactor",
        "description": "A code change that neither fixes a bug nor adds a feature",
        "category": "Refactoring"
      },
      {
        "type": "perf",
        "description": "A code change that improves performance",
        "category": "Performance"
      },
      {
        "type": "test",
        "description": "Adding missing tests or correcting existing tests",
        "category": "Testing"
      },
      {
        "type": "build",
        "description": "Changes that affect the build system or external dependencies",
        "category": "Build System"
      },
      {
        "type": "ci",
        "description": "Changes to our CI configuration files and scripts",
        "category": "Continuous Integration"
      },
      {
        "type": "chore",
        "description": "Other changes that don't modify src or test files",
        "category": "Chore"
      }
    ],
    "format": {
      "structure": "<type>[optional scope]: <description>",
      "example": "feat(auth): add login functionality"
    },
    "rules": [
      "All commit messages must follow the Conventional Commits specification",
      "Commit messages should be in the present tense",
      "First line should not exceed 72 characters",
      "Use imperative mood in the description",
      "Do not add periods at the end of the description",
      "Separate the subject from the body with a blank line if adding a body",
      "Can optionally add a scope in parentheses after the type",
      "Body should explain the 'what' and 'why' of the commit",
      "Footer can include breaking changes or issue references"
    ],
    "examples": {
      "valid": [
        "feat: add user authentication",
        "fix: resolve memory leak in data processing",
        "docs: update API documentation",
        "refactor(auth): improve login validation",
        "feat(api)!: breaking change to API endpoints",
        "fix: correct typo in README",
        "test: add unit tests for user service",
        "build: update dependencies"
      ],
      "invalid": [
        "Update files",
        "Fix bug",
        "Added new feature",
        "update README.md",
        "Improve performance of function"
      ]
    },
    "scopeGuidelines": [
      "Scope should be a noun that describes the part of the system being changed",
      "Common scopes: auth, api, database, ui, config, etc.",
      "Use consistent naming for scopes across the project",
      "Scope is optional but recommended for clarity"
    ],
    "breakingChanges": {
      "format": "A breaking change should include an exclamation mark (!) after the type/scope",
      "example": "feat(api)!: remove deprecated methods",
      "description": "Breaking changes should be clearly marked and explained in the commit body"
    }
  }
}